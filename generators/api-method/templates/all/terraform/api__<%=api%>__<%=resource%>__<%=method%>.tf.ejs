# ------------------------------------------------------------------------------
# <%=`${api} - ${method} ${resource}`%>
# ------------------------------------------------------------------------------

resource "aws_iam_role" "<%=`${api}_${resource}_${method}`%>-lambda" {
    name               = "${local.prefix}--<%=`${api}--${resource}--${method}`%>"
    assume_role_policy = jsonencode({
        Version = "2012-10-17",
        Statement = [
            {
                Effect = "Allow",
                Principal = {
                    Service = "lambda.amazonaws.com"
                },
                Action = "sts:AssumeRole"
            }
        ]
    })
}

resource "aws_iam_role_policy_attachment" "<%=`${api}_${resource}_${method}`%>-lambda-log" {
    role       = aws_iam_role.<%=`${api}_${resource}_${method}`%>-lambda.name
    policy_arn = aws_iam_policy.lambda-logs.arn
}

data "archive_file" "<%=`${api}_${resource}_${method}`%>" {
    type        = "zip"
    source_dir  = "${path.module}/../api/<%=api%>/<%=resource%>/<%=method%>/out"
    output_path = "${path.module}/output/<%=`${api}_${resource}_${method}`%>.zip"
    excludes    = [
        <% if (language === 'python') { -%>
        ".pytest_cache",
        "__pycache__",
        "venv/bin",
        "venv/lib64"
        <% } -%>
    ]
}

resource "aws_lambda_function" "<%=`${api}_${resource}_${method}`%>-lambda" {
    function_name    = "${local.prefix}_<%=`${api}_${resource}_${method}`%>"
    runtime          = "<%=runtime%>"
    handler          = "index.handler"
    role             = aws_iam_role.<%=`${api}_${resource}_${method}`%>-lambda.arn
    filename         = data.archive_file.<%=`${api}_${resource}_${method}`%>.output_path
    source_code_hash = data.archive_file.<%=`${api}_${resource}_${method}`%>.output_base64sha256
    timeout          = local.lambda_timeout
    memory_size      = 128
    <% if (vpc === "(none)") { -%>
    vpc_config {
        subnet_ids         = [ aws_vpc.<%=vpc%>.id ]
        security_group_ids = [ aws_subnet.<%=vpc%>_A.id ]
    }
    <% } -%>
    environment {
        variables = {
            PREFIX = local.prefix
        }
    }
}

resource "aws_cloudwatch_log_group" "<%=`${api}_${resource}_${method}`%>-lambda-log" {
    name              = "/aws/lambda/${local.prefix}_<%=`${api}_${resource}_${method}`%>"
    retention_in_days = local.log_retention_in_days
}

resource "aws_api_gateway_method" "<%=`${api}_${resource}_${method}`%>" {
    rest_api_id   = aws_api_gateway_rest_api.<%=api%>.id
    resource_id   = aws_api_gateway_resource.<%=`${api}_${resource}`%>.id
    http_method   = "<%=method%>"
    authorization = "NONE"

    request_parameters = {
        "method.request.path.id" = true
    }
}

resource "aws_api_gateway_integration" "<%=`${api}_${resource}_${method}`%>" {
    rest_api_id             = aws_api_gateway_rest_api.<%=api%>.id
    resource_id             = aws_api_gateway_resource.<%=`${api}_${resource}`%>.id
    http_method             = aws_api_gateway_method.<%=`${api}_${resource}_${method}`%>.http_method
    integration_http_method = "POST"
    type                    = "AWS_PROXY"
    uri                     = aws_lambda_function.<%=`${api}_${resource}_${method}`%>-lambda.invoke_arn

    passthrough_behavior    = "WHEN_NO_TEMPLATES"
    content_handling        = "CONVERT_TO_TEXT"

    request_templates = {
        "application/json" = jsonencode({
            // id = "$input.params('id')"
        })
    }
}

resource "aws_lambda_permission" "<%=`${api}_${resource}_${method}`%>-lambda" {
    statement_id  = "AllowExecutionFromAPIGateway"
    action        = "lambda:InvokeFunction"
    function_name = aws_lambda_function.<%=`${api}_${resource}_${method}`%>-lambda.function_name
    principal     = "apigateway.amazonaws.com"
    source_arn    = "arn:aws:execute-api:${local.region}:${var.account}:${aws_api_gateway_rest_api.<%=api%>.id}/*/${aws_api_gateway_method.<%=`${api}_${resource}_${method}`%>.http_method}${aws_api_gateway_resource.<%=`${api}_${resource}`%>.path}"
}

resource "aws_api_gateway_method_response" "<%=`${api}_${resource}_${method}`%>-200" {
    rest_api_id = aws_api_gateway_rest_api.<%=api%>.id
    resource_id = aws_api_gateway_resource.<%=`${api}_${resource}`%>.id
    http_method = aws_api_gateway_method.<%=`${api}_${resource}_${method}`%>.http_method
    status_code = "200"

    response_parameters = {
        "method.response.header.Access-Control-Allow-Origin"  = true
        "method.response.header.Access-Control-Allow-Methods" = true
        "method.response.header.Access-Control-Allow-Headers" = true
    }

    response_models = {
        "application/json"    = "Empty"
    }
}

resource "aws_api_gateway_integration_response" "<%=`${api}_${resource}_${method}`%>-200" {
    rest_api_id = aws_api_gateway_rest_api.<%=api%>.id
    resource_id = aws_api_gateway_resource.<%=`${api}_${resource}`%>.id
    http_method = aws_api_gateway_method.<%=`${api}_${resource}_${method}`%>.http_method
    status_code = aws_api_gateway_method_response.<%=`${api}_${resource}_${method}`%>-200.status_code

    response_parameters = {
        "method.response.header.Access-Control-Allow-Origin"  = "'${local.AccessControlAllowOrigin}'"
        "method.response.header.Access-Control-Allow-Methods" = "'${local.AccessControlAllowMethods}'"
        "method.response.header.Access-Control-Allow-Headers" = "'${local.AccessControlAllowHeaders}'"
    }

    response_templates = {
        "application/json" = null
    }
}
