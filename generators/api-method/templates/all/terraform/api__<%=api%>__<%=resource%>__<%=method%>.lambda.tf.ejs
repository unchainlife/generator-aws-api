# ------------------------------------------------------------------------------
# <%=`${api} - ${method} ${resource}`%>
# ------------------------------------------------------------------------------
<%
    const fullname      = `${api}__${resource}__${method}`;
    const function_name = `api--${api}--${resource}--${method}`;
    const rolename      = `${fullname}__role`;
-%>

resource "aws_iam_role" "<%=rolename%>" {
    name               = "${local.prefix}--<%=function_name%>"
    assume_role_policy = jsonencode({
        Version = "2012-10-17",
        Statement = [
            {
                Effect = "Allow",
                Principal = {
                    Service = "lambda.amazonaws.com"
                },
                Action = "sts:AssumeRole"
            }
        ]
    })
}

resource "aws_iam_role_policy_attachment" "<%=`${fullname}__lambda-log`%>" {
    role       = aws_iam_role.<%=rolename%>.name
    policy_arn = aws_iam_policy.lambda-logs.arn
}

data "archive_file" "<%=fullname%>" {
    type        = "zip"
    source_dir  = "${path.module}/../api/<%=api%>/<%=resource%>/<%=method%>/out"
    output_path = "${path.module}/output/<%=fullname%>.zip"
    excludes    = [
<% if (language === 'python') { -%>
        ".pytest_cache",
        "__pycache__",
        "venv/bin",
        "venv/lib64"
<% } -%>
    ]
}

resource "aws_lambda_function" "<%=fullname%>" {
    function_name    = "${local.prefix}__<%=function_name%>"
    runtime          = "<%=runtime%>"
    handler          = "index.handler"
    role             = aws_iam_role.<%=rolename%>.arn
    filename         = data.archive_file.<%=fullname%>.output_path
    source_code_hash = data.archive_file.<%=fullname%>.output_base64sha256
    timeout          = local.lambda_timeout
    memory_size      = 128
<% if (vpc === "(none)") { -%>
    vpc_config {
        subnet_ids         = [ aws_vpc.<%=vpc%>.id ]
        security_group_ids = [ aws_subnet.<%=vpc%>_A.id ]
    }
<% } -%>
    environment {
        variables = {
            PREFIX = local.prefix
        }
    }
<% if (layers && layers.length) { -%>
    layers = [
        <%- layers.map(layer => `aws_lambda_layer_version.${layer}.arn`).join(',\n\t\t') %>
    ]
<% } -%>
}

resource "aws_cloudwatch_log_group" "<%=`${fullname}__lambda-log`%>" {
    name              = "/aws/lambda/${local.prefix}_<%=`${fullname}`%>"
    retention_in_days = local.log_retention_in_days
}
